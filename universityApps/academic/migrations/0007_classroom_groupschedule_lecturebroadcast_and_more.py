# Generated by Django 5.1.6 on 2025-04-22 22:38

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('academic', '0006_studentgroupmembership'),
        ('users', '0002_alter_student_status'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Room A101, Virtual Lab 3', max_length=100, unique=True, verbose_name='Classroom Name')),
                ('building', models.CharField(blank=True, help_text='e.g., Main Campus, Online, Engineering Block', max_length=100, null=True, verbose_name='Building')),
                ('floor', models.CharField(blank=True, help_text='e.g., 1st, Ground, Online', max_length=10, null=True, verbose_name='Floor')),
                ('capacity', models.PositiveSmallIntegerField(help_text='Maximum number of students allowed', verbose_name='Maximum Capacity')),
                ('is_lab', models.BooleanField(default=False, help_text='Mark this if the room is used for lab sessions', verbose_name='Is Lab')),
                ('is_virtual', models.BooleanField(default=False, help_text='Use for online/streaming spaces', verbose_name='Is Virtual Room')),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to disable scheduling in this room', verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Classroom',
                'verbose_name_plural': 'Classrooms',
                'ordering': ['building', 'name'],
                'indexes': [models.Index(fields=['building', 'floor'], name='idx_classroom_location'), models.Index(fields=['is_lab'], name='idx_classroom_is_lab'), models.Index(fields=['is_virtual'], name='idx_classroom_virtual')],
            },
        ),
        migrations.CreateModel(
            name='GroupSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('sunday', 'Sunday'), ('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday')], max_length=10, verbose_name='Day')),
                ('start_time', models.TimeField(verbose_name='Start Time')),
                ('end_time', models.TimeField(verbose_name='End Time')),
                ('is_online', models.BooleanField(default=False, verbose_name='Online Session')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='academic.classroom', verbose_name='Classroom')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='academic.studentgroup', verbose_name='Group')),
                ('instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.facultymember', verbose_name='Instructor')),
                ('semester_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_schedules', to='academic.semestercourse', verbose_name='Semester Course')),
            ],
            options={
                'verbose_name': 'Group Schedule',
                'verbose_name_plural': 'Group Schedules',
                'ordering': ['day', 'start_time'],
                'unique_together': {('group', 'semester_course', 'day', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='LectureBroadcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream_key', models.CharField(default=uuid.uuid4, max_length=64, unique=True, verbose_name='Stream Key')),
                ('status', models.CharField(choices=[('offline', 'Offline'), ('live', 'Live'), ('ended', 'Ended'), ('canceled', 'Canceled')], default='offline', max_length=10, verbose_name='Status')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Start Time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End Time')),
                ('viewer_count', models.PositiveIntegerField(default=0, verbose_name='Viewer Count')),
                ('record_path', models.CharField(blank=True, max_length=255, null=True, verbose_name='Recording Path')),
                ('playback_token', models.CharField(blank=True, max_length=128, null=True, verbose_name='Playback Token')),
                ('token_expiry', models.DateTimeField(blank=True, null=True, verbose_name='Token Expiry')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('schedule', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='broadcast', to='academic.groupschedule', verbose_name='Group Schedule')),
            ],
            options={
                'verbose_name': 'Lecture Broadcast',
                'verbose_name_plural': 'Lecture Broadcasts',
            },
        ),
        migrations.CreateModel(
            name='LiveAttendanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_time', models.DateTimeField(auto_now_add=True)),
                ('leave_time', models.DateTimeField(blank=True, null=True)),
                ('broadcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_logs', to='academic.lecturebroadcast')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_attendance', to='users.student')),
            ],
            options={
                'verbose_name': 'Live Attendance Log',
                'verbose_name_plural': 'Live Attendance Logs',
            },
        ),
        migrations.AddIndex(
            model_name='lecturebroadcast',
            index=models.Index(fields=['status'], name='broadcast_status_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='liveattendancelog',
            unique_together={('broadcast', 'student')},
        ),
    ]
