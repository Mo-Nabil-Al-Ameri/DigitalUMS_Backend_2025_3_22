# Generated by Django 5.1.6 on 2025-04-22 21:58

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('academic', '0004_semesterplan_name_ar_semesterplan_name_en'),
        ('programs', '0002_alter_academiclevel_program'),
        ('users', '0002_alter_student_status'),
    ]

    operations = [
        migrations.AddField(
            model_name='semester',
            name='add_drop_end_date',
            field=models.DateField(blank=True, null=True, verbose_name='Add/Drop End Date'),
        ),
        migrations.AddField(
            model_name='semester',
            name='withdrawal_deadline',
            field=models.DateField(blank=True, null=True, verbose_name='Withdrawal Deadline'),
        ),
        migrations.CreateModel(
            name='GradeComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Component Name')),
                ('type', models.CharField(choices=[('Quiz', 'Quiz'), ('Assignment', 'Assignment'), ('Project', 'Project'), ('Participation', 'Participation'), ('Midterm', 'Midterm Exam'), ('Final', 'Final Exam'), ('Lab', 'Lab work'), ('Presentation', 'Presentation'), ('Other', 'Other')], max_length=20, verbose_name='Component Type')),
                ('weight', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Weight (%)')),
                ('max_score', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Maximum Score')),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='Due Date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_required', models.BooleanField(default=True, verbose_name='Required')),
                ('semester_course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='grade_components', to='academic.semestercourse', verbose_name='Semester Course')),
            ],
            options={
                'verbose_name': 'Grade Component',
                'verbose_name_plural': 'Grade Components',
                'ordering': ['semester_course', 'due_date'],
            },
        ),
        migrations.CreateModel(
            name='ComponoentScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Score')),
                ('precentage', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Precentage')),
                ('weighted_score', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Weighted Score')),
                ('submitted_date', models.DateField(auto_now_add=True, db_index=True, verbose_name='Submitted Date')),
                ('graded_date', models.DateField(auto_now_add=True, db_index=True, verbose_name='Graded Date')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='Feedback')),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_component_scores', to='users.facultymember', verbose_name='Graded By')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='component_scores', to='users.student', verbose_name='Student')),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='component_scores', to='academic.gradecomponent', verbose_name='Component')),
            ],
            options={
                'verbose_name': 'Component Score',
                'verbose_name_plural': 'Component Scores',
            },
        ),
        migrations.CreateModel(
            name='GradeScale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_default', models.BooleanField(default=False, verbose_name='Default')),
            ],
            options={
                'verbose_name': 'Grading Scale',
                'verbose_name_plural': 'Grading Scales',
                'indexes': [models.Index(fields=['is_default'], name='grading_scale_is_default_idx')],
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Letter', models.CharField(max_length=5, verbose_name='Letter')),
                ('description', models.TextField(max_length=100, verbose_name='Description')),
                ('points', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='Points')),
                ('min_percent', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Min. Percentage')),
                ('max_percent', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Max. Percentage')),
                ('is_passing', models.BooleanField(default=True, verbose_name='Passing')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('scale', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='scale_grades', to='academic.gradescale', verbose_name='Scale')),
            ],
            options={
                'verbose_name': 'Grade',
                'verbose_name_plural': 'Grades',
                'ordering': ['scale', '-order'],
            },
        ),
        migrations.CreateModel(
            name='SemesterRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Registration Date')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('active', 'Active'), ('completed', 'Completed'), ('withdrawn', 'Withdrawn')], default='draft', max_length=10)),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Approval Date')),
                ('total_credits', models.PositiveIntegerField(default=0, verbose_name='Total Credits')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='academic_year_semester_registrations', to='academic.academicyear', verbose_name='Academic Year')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_registrations', to='users.facultymember', verbose_name='Approved By')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='semester_registrations', to='academic.semester', verbose_name='Semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_semester_registrations', to='users.student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Semester Registration',
                'verbose_name_plural': 'Semester Registrations',
            },
        ),
        migrations.CreateModel(
            name='StudentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Enrollment Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('graduated', 'Graduated'), ('suspended', 'Suspended'), ('dismissed', 'Dismissed'), ('withdrawn', 'Withdrawn')], default='active', max_length=10)),
                ('actual_graduation_date', models.DateField(blank=True, null=True, verbose_name='Actual Graduation Date')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='programs.academicprogram')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.student')),
                ('study_plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.studyplan')),
            ],
            options={
                'verbose_name': 'Student Enrollment',
                'verbose_name_plural': 'Student Enrollments',
            },
        ),
        migrations.CreateModel(
            name='StudentGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numeric_value', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Numeric Value')),
                ('grade_points', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='Grade Points')),
                ('is_included_in_gpa', models.BooleanField(default=True, verbose_name='Included in GPA')),
                ('graded_date', models.DateField(auto_now_add=True, db_index=True, verbose_name='Graded Date')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last Modified')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='student_grades', to='academic.grade', verbose_name='Grade')),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_grades', to='users.facultymember', verbose_name='Graded By')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='semester_grades', to='academic.semester', verbose_name='Semester')),
                ('semester_course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='grades_per_student', to='academic.semestercourse', verbose_name='Semester Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='grades', to='users.student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Student Grade',
                'verbose_name_plural': 'Student Grades',
            },
        ),
        migrations.CreateModel(
            name='CourseRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Registration Date')),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('dropped', 'Dropped'), ('withdrawn', 'Withdrawn'), ('completed', 'Completed'), ('failed', 'Failed'), ('incomplete', 'Incomplete')], default='registered', max_length=10)),
                ('is_repeat', models.BooleanField(default=False, verbose_name='Is Repeat')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('semester_course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='semester_course_registrations', to='academic.semestercourse', verbose_name='Semester Course')),
                ('semester_registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_registrations', to='academic.semesterregistration', verbose_name='Semester Registration')),
                ('grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grade_course_registrations', to='academic.studentgrade', verbose_name='Grade')),
            ],
            options={
                'verbose_name': 'Course Registration',
                'verbose_name_plural': 'Course Registrations',
            },
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('max_students', models.PositiveSmallIntegerField(default=25, verbose_name='Max Students')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='programs.academiclevel', verbose_name='Level')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='programs.academicprogram', verbose_name='Program')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.semester', verbose_name='Semester')),
            ],
            options={
                'verbose_name': 'Student Group',
                'verbose_name_plural': 'Student Groups',
                'ordering': ['name'],
            },
        ),
        migrations.AddIndex(
            model_name='gradecomponent',
            index=models.Index(fields=['semester_course'], name='grade_component_course_idx'),
        ),
        migrations.AddIndex(
            model_name='gradecomponent',
            index=models.Index(fields=['weight'], name='grade_component_weight_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='componoentscore',
            unique_together={('student', 'component')},
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['scale', 'Letter'], name='grade_scale_letter_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['min_percent'], name='grade_min_percent_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['max_percent'], name='grade_max_percent_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grade',
            unique_together={('scale', 'Letter')},
        ),
        migrations.AddIndex(
            model_name='semesterregistration',
            index=models.Index(fields=['academic_year'], name='semester_reg_year_idx'),
        ),
        migrations.AddIndex(
            model_name='semesterregistration',
            index=models.Index(fields=['semester'], name='semester_reg_semester_idx'),
        ),
        migrations.AddIndex(
            model_name='semesterregistration',
            index=models.Index(fields=['student'], name='semester_reg_student_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='semesterregistration',
            unique_together={('student', 'semester', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='studentenrollment',
            unique_together={('student', 'program', 'study_plan')},
        ),
        migrations.AlterUniqueTogether(
            name='studentgrade',
            unique_together={('student', 'semester_course', 'semester')},
        ),
        migrations.AddIndex(
            model_name='courseregistration',
            index=models.Index(fields=['semester_registration'], name='c_registration_semester_idx'),
        ),
        migrations.AddIndex(
            model_name='courseregistration',
            index=models.Index(fields=['status'], name='course_registration_status_idx'),
        ),
        migrations.AddIndex(
            model_name='courseregistration',
            index=models.Index(fields=['is_repeat'], name='registration_is_repeat_idx'),
        ),
        migrations.AddIndex(
            model_name='courseregistration',
            index=models.Index(fields=['semester_course'], name='semester_registration_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseregistration',
            unique_together={('semester_registration', 'semester_course')},
        ),
    ]
