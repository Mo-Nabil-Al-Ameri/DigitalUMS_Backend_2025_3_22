# Generated by Django 5.1.6 on 2025-04-19 23:57

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import universityApps.users.utils
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('colleges', '0001_initial'),
        ('departments', '0001_initial'),
        ('programs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('staff', 'Staff Member'), ('faculty', 'Faculty Member'), ('student', 'Student')], default='admin', help_text='Role of the user', max_length=20, verbose_name='Role')),
                ('uuid', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the user', unique=True, verbose_name='UUID')),
                ('email', models.EmailField(help_text='Email address of the user', max_length=254, unique=True, verbose_name='Email')),
                ('username', models.CharField(blank=True, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Username')),
                ('national_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='National ID')),
                ('nationality', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nationality')),
                ('secondary_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Secondary Email')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('phone_number', models.CharField(error_messages={'unique': 'A user with that phone number already exists,your phone number must be unique'}, max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=100, null=True, verbose_name='State/Province')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date Joined')),
                ('college', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='college_users', to='colleges.college', verbose_name='College')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='department_users', to='departments.department', verbose_name='Department')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the notification', max_length=200, verbose_name='Title')),
                ('message', models.TextField(help_text='Message of the notification', verbose_name='Message')),
                ('notification_type', models.CharField(choices=[('system', 'System'), ('academic', 'Academic'), ('enrollement', 'Enrollement'), ('grade', 'Grade'), ('announcement', 'Announcement'), ('message', 'Message'), ('other', 'Other')], default='other', max_length=30, verbose_name='Type')),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('urgent', 'Urgent')], default='medium', max_length=30, verbose_name='Priority')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time when the notification was created', verbose_name='Created At')),
                ('read', models.BooleanField(default=False, help_text='Whether the notification has been read', verbose_name='Read')),
                ('read_at', models.DateTimeField(blank=True, help_text='Time when the notification was read', null=True, verbose_name='Read At')),
                ('link', models.URLField(blank=True, help_text='Link to the notification', null=True, verbose_name='Link')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Time of the notification', verbose_name='Timestamp')),
                ('sender', models.ForeignKey(blank=True, help_text='User who sent the notification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Sender')),
                ('user', models.ForeignKey(help_text='User to which the notification belongs', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=20, unique=True, verbose_name='Student ID')),
                ('admission_date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Admission Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('graduated', 'Graduated'), ('suspended', 'Suspended'), ('dismissed', 'Dismissed')], default='active', max_length=20, verbose_name='Status')),
                ('secondary_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Secondary Phone Number')),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of Birth')),
                ('direcorate', models.CharField(blank=True, max_length=100, null=True, verbose_name='Directorate')),
                ('previous_qualifications', models.TextField(blank=True, null=True, verbose_name='Previous Qualifications')),
                ('qualification_average', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Qualification Average')),
                ('qualification_institution', models.CharField(blank=True, max_length=100, null=True, verbose_name='Where To Get the Qualification')),
                ('date_obtained', models.DateField(blank=True, null=True, verbose_name='Date Obtained')),
                ('cgpa', models.DecimalField(db_index=True, decimal_places=2, default=0.0, max_digits=5, verbose_name='CGPA')),
                ('total_credits_earned', models.PositiveSmallIntegerField(default=0, verbose_name='Total Credits Earned')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Emergency Contact Name')),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=17, null=True, verbose_name='Emergency Contact Phone')),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True, verbose_name='Emergency Contact Relationship')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='department_students', to='departments.department', verbose_name='Department')),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='program_students', to='programs.academicprogram', verbose_name='Program')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['student_id'],
            },
        ),
        migrations.CreateModel(
            name='StudentDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('national_id', 'National ID'), ('high_school', 'High School Certificate'), ('photo', 'Personal Photo'), ('other', 'Other')], max_length=50, verbose_name='Document Type')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Document Title')),
                ('file', models.FileField(upload_to=universityApps.users.utils.student_document_upload_path, verbose_name='File')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='users.student', verbose_name='Student')),
            ],
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logtype', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('password_change', 'Password Change'), ('profile_update', 'Profile Update'), ('role_change', 'Role Change'), ('status_change', 'Status Change'), ('other', 'Other')], default='other', max_length=30, verbose_name='Log Type')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Time of the log', verbose_name='Timestamp')),
                ('user_agent', models.TextField(blank=True, help_text='User agent of the user', null=True, verbose_name='User Agent')),
                ('details', models.JSONField(blank=True, help_text='Details of the log', null=True, verbose_name='Details')),
                ('user', models.ForeignKey(help_text='User who logged in', on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Log',
                'verbose_name_plural': 'User Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FacultyMember',
            fields=[
                ('user', models.OneToOneField(help_text='User to which the faculty member belongs', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='faculty', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('Faculty_id', models.CharField(max_length=30, unique=True, verbose_name='Faculty ID')),
                ('hire_date', models.DateField(default=django.utils.timezone.now, verbose_name='Hire Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('on_leave', 'On Leave'), ('sabbatical', 'Sabbatical'), ('retired', 'Retired'), ('terminated', 'Terminated')], default='active', help_text='Status of the faculty member', max_length=30, verbose_name='Status')),
                ('rank', models.CharField(choices=[('professor', 'Professor'), ('associate_professor', 'Associate Professor'), ('assistant_professor', 'Assistant Professor'), ('lecturer', 'Lecturer'), ('instructor', 'Instructor'), ('adjunct', 'Adjunct Faculty'), ('visiting', 'Visiting Faculty')], default='instructor', help_text='Rank of the faculty member', max_length=30, verbose_name='Rank')),
                ('specialization', models.CharField(blank=True, max_length=200, null=True, verbose_name='Specialization')),
                ('research_interests', models.TextField(blank=True, null=True, verbose_name='Research Interests')),
                ('publications', models.TextField(blank=True, null=True, verbose_name='Publications')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='faculty_members', to='departments.department', verbose_name='Department')),
            ],
            options={
                'verbose_name': 'Faculty Member',
                'verbose_name_plural': 'Faculty Members',
                'ordering': ['Faculty_id'],
            },
        ),
        migrations.CreateModel(
            name='StaffMember',
            fields=[
                ('user', models.OneToOneField(help_text='User to which the staff member belongs', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('stuff_id', models.CharField(max_length=30, unique=True, verbose_name='Stuff ID')),
                ('hire_date', models.DateField(default=django.utils.timezone.now, verbose_name='Hire Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('on_leave', 'On Leave'), ('terminated', 'Terminated')], default='active', help_text='Status of the staff member', max_length=30, verbose_name='Status')),
                ('job_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Job Title')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_members', to='departments.department', verbose_name='Department')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_supervisor', to='users.staffmember', verbose_name='Supervisor')),
            ],
            options={
                'verbose_name': 'Staff Member',
                'verbose_name_plural': 'Staff Members',
                'ordering': ['stuff_id'],
            },
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id'], name='student_student_id_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['status'], name='student_status_idx'),
        ),
        migrations.AddIndex(
            model_name='facultymember',
            index=models.Index(fields=['Faculty_id'], name='faculty_Faculty_id_idx'),
        ),
        migrations.AddIndex(
            model_name='facultymember',
            index=models.Index(fields=['status'], name='faculty_status_idx'),
        ),
        migrations.AddIndex(
            model_name='staffmember',
            index=models.Index(fields=['stuff_id'], name='staff_stuff_id_idx'),
        ),
        migrations.AddIndex(
            model_name='staffmember',
            index=models.Index(fields=['status'], name='staff_status_idx'),
        ),
    ]
